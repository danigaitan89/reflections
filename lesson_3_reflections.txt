When would you want to use a remote repository rather than keeping all your work
local?

    I would like to use a remote repository when I'm working from different computers and when I'm collaborating with someone else.  It looks like a great tool for collaboration and for merging different files versions.  It looks really nice for optimizing the time spent coding.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    So I can have control of the changes I'm making.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks is for making changes to a repository that I don't have permission to, but at the end I can suggest changes because they are connected at some point.  Clone is for having a repository available in my local server.  Branches is for testint new features, etc and then maybe merge so I always have a version of my code working.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit will be that I'm going to know if I'm ahead or behind the last state of the remote.  This is going to help me
    because I can check that way what changes have been made and compare them between different versions of the code.
    The sync will be easier.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    It would be easier to communicate the change through a phone call or something like that.
    It would be harder to unify the code and make efficient merging.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    The benefits will be to have always a working version of the code and merge new features as smooth as possible.
